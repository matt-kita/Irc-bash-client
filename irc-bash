#!/bin/bash
chans=( "#nixheads" )
[[ -z $IRC_SSL ]] && IRC_SSL="NO"
[[ -z $IRC_BOT_PASS ]] && IRC_BOT_PASS=""
[[ -z $IRC_BOT_NICK ]] && IRC_BOT_NICK=""
[[ -z $IRC_BOT_OP_CHAN ]] && IRC_BOT_OP_CHAN=""
[[ -z $LOGGING ]] && LOGGING="NO"
[[ -z $LOGfile ]] && LOGfile="IrcLOG"
[[ -z $IRC_HOST ]] && IRC_HOST="irc.freenode.net"
[[ -z $IRC_PORT ]] && IRC_PORT=6667
[[ -z $IRC_NICK ]] && IRC_NICK="MrBash"
[[ -z $IRC_PASS ]] && IRC_PASS=""
[[ -z $IRC_SCRIPT ]] && IRC_SCRIPT=":s #nixheads"
[[ -z $IRC_PREFIX ]] && IRC_PREFIX=(
    "\e[0m\e[4m\e[1m\e[31m::^ERROR"
    "\e[0m\e[24m\e[22m\e[0;92m\e[30m::(^<[^@]*@[^#])"
    "\e[0m\e[24m\e[1m\e[32m::#nixheads"
    "\e[0m::^<"
    "\e[0m::^->"
    "\e[0m\e[24m\e[22m\e[40m\e[1;97m::(.*)"
)

LastPongTime=99
[[ -r "$HOME/.bashirc" ]] && source "$HOME/.bashirc"
trap "echo" SIGINT
trap "kill 0" EXIT
function _imgur {
imgur=$( curl -Ls -o /dev/null -w %{url_effective} http://imgur.com/random | sed s/imgur/i.imgur/g | sed 's/gallery\///g')
_send "PRIVMSG $channel : < $_user : $imgur >"
_output "-> sent $imgur"
}
function _Readmalines {
readthefile=$(sed -n $_txt)
_send "PRIVMSG $channel : $readthefile"
_output "-> $readthefile"
}
function _join_chans {
for chan in "${chans[@]}"; do
	 _send "JOIN  :$chan"
done
}
function _send() {
if [[ $AcTion == "YES" ]]; then
printf "%s\rPRIVMSG $channel :\u0001ACTION $*\u0001\n"  >&3
AcTion="NO"
else
    printf "%s\r\n" "$*" >&3
fi
}
function _output() {
    _prefix=""
    for rule in ${IRC_PREFIX[@]}; do
        [[ "$@" =~ ${rule#*::} ]] && _prefix="${rule%%::*}$_prefix"
    done
printf "$_prefix%s\e[0m\n" "$*"
}
function _input() {
    local line="$@"
    if [[ "${line:0:1}" != ":" ]]; then
	echo -ne "\033[2K"
        [[ -z $channel ]] && _output "ERROR: No channel to send to" && return
	_output "-> $channel> $line"
	if [[ $LOGGING == "YES" ]] ; then
	echo "<$IRC_NICK@$channel> :$line" >> $LOGfile
	fi
        _send "PRIVMSG $channel :$line"
        return
    fi
    if [[ ${#line} == 2 || ${line:2:1} == " " ]]; then
        _txt="${line:3}"
        case ${line:1:1} in
	    a ) AcTion="YES" ; _send "$_txt"; return;;
	    o ) _send "MODE $channel +o $_txt"; return;;
	    p ) _send "PRIVMSG $IRC_BOT_NICK :ping " ; return ;;
	    i ) _imgur; return;;
	    r ) _Readmalines; return;;
	    k ) _send "KICK $channel $_txt" ; return ;;
            m ) read -r _to _msg <<< "$_txt" && _send "PRIVMSG $_to :$_msg" && _output "-> $_to> $_msg"; return;;
            l ) read -r _from _msg <<< "$_txt" && _send "PART $_from :$_msg"; return;;
            j ) _send "JOIN $_txt"; [[ -z $channel ]] && channel=$_txt; return;;
            s ) channel="$_txt";  return;;
	    z ) _send "PRIVMSG $IRC_BOT_NICK :IDENTIFY $IRC_BOT_PASS" ; return ;;
            q ) _send "QUIT"; stty echo;  exit 0;;
        esac
    fi
    _send "${line:1}"
}
while getopts "h:p:n:x:l:k:j:y:u:f:v" flag; do
    case $flag in
        v) printf " "; exit;;
        h) IRC_HOST="$OPTARG";;
        p) IRC_PORT="$OPTARG";;
        n) IRC_NICK="$OPTARG";;
        x) IRC_PASS="$OPTARG";;
        l) IRC_BOT_PASS="$OPTARG";;
        k) IRC_BOT_NICK="$OPTARG";;
        j) IRC_BOT_OP_CHAN="$OPTARG";;
        y) LOGGING="$OPTARG";;
        u) LOGfile="$OPTARG";;
        f) source "$OPTARG";;
        ?) printf "Usage: $0 [-h hostname] [-p port] [-n nick] [-x password] [-f configfile] [-l bot pass] [-k bot nick] [-j bot op chan] [-y logging YES/NO] [-u log file] [-v]\n" >&2; exit 1;;
    esac
done
if [[ $IRC_SSL == "YES" ]]; then
socat STDIO OPENSSL:$IRC_HOST:$IRC_PORT,verify=0
fi
if [[ $IRC_SSL == "NO" ]]; then
connect() { exec 3<>/dev/tcp/$IRC_HOST/$IRC_PORT || exit 1; }
fi
connect
{
    while read _line; do
    dAtE=$(date +'<%H:%M:%S>')
#         echo -ne "\\u2717\r"
        [[ ${_line:0:1} == ":" ]] && _source="${_line%% *}" && _line="${_line#* }"
        _source="${_source:1}"
        _user=${_source%%\!*}
        _txt="${_line#*:}"
        case "${_line%% *}" in
            "PING")
                _send "PONG"
		PongTime=$(date +'%M')
		LastPongTime=$PongTime
		echo -ne "\\u2713\r" ;;
            "PRIVMSG")
                _ch="${_line%% :*}"
                _ch="${_ch#* }"
                _output "$dAtE<$_user@$_ch> $_txt"
	        if [[ $LOGGING == "YES" ]] ; then
		echo "<$_user@$_ch> $_txt" >> $LOGfile
		fi
		if [[ $_txt == *"$IRC_NICK"* ]]
		then
		 notify-send "IRC  Bash  Client" "$_user mentioned you in $_ch" &
		fi ;;
	    "KICK")
		notify-send "IRC  Bash  Client" "$_user kicked you from $_ch" &
		for chan in "${chans[@]}"; do
			_send "JOIN  :$chan"
			notify-send "IRC  Bash  Client" "Rejoining $_ch" &
		done
		;;
            *)
                _output "$_source >< $_line" ;;
        esac
    done
} <&3 &
[[ $IRC_PASS ]] && _send "PASS $IRC_PASS"
_send "NICK $IRC_NICK"
_send "USER $IRC_NICK localhost $IRC_HOST :$IRC_NICK"
function _trim() { echo $1; }
IFS=";" read -rsa C <<< "$IRC_SCRIPT"
for _cmd in "${C[@]}"; do
    _join_chans
    _input $(_trim "$_cmd")
done
while read -e line; do
    _input "$line"
done
